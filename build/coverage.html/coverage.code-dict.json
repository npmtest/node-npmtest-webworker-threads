{"/home/travis/build/npmtest/node-npmtest-webworker-threads/test.js":"/* istanbul instrument in package npmtest_webworker_threads */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webworker-threads/lib.npmtest_webworker_threads.js":"/* istanbul instrument in package npmtest_webworker_threads */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_webworker_threads = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_webworker_threads = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-webworker-threads/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-webworker-threads && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_webworker_threads */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_webworker_threads\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_webworker_threads.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_webworker_threads.rollup.js'] =\n            local.assetsDict['/assets.npmtest_webworker_threads.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_webworker_threads.__dirname + '/lib.npmtest_webworker_threads.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-webworker-threads/node_modules/webworker-threads/index.js":"var WebWorkerThreads = require('bindings')('WebWorkerThreads');\n \nmodule.exports = WebWorkerThreads;\n","/home/travis/build/npmtest/node-npmtest-webworker-threads/node_modules/webworker-threads/benchmark/b00_fibonacci_server_no_threads.js":"\n\nfunction fib (n) {\n  return (n < 2) ? 1 : fib(n-2)+ fib(n-1);\n}\n\nvar i= 0;\nvar n= 35;\nfunction ƒ (req, res) {\n  if ((++i) % 10) {\n    res.end(\" QUICK\");\n    process.stdout.write(\" QUICK\");\n  }\n  else {\n    var txt= ' '+ fib(n);\n    res.end(txt);\n    process.stdout.write(txt);\n  }\n}\n\n\nvar port= +process.argv[2] || 1234;\nvar http= require('http');\nhttp.globalAgent.maxSockets= 8192+2048;\nhttp.createServer(ƒ).listen(port);\nconsole.log('Fibonacci server (NO THREADS) running @port: '+ port);\n\n","/home/travis/build/npmtest/node-npmtest-webworker-threads/node_modules/webworker-threads/benchmark/b01_fibonacci_server_threads.js":"\n\nfunction fib (n) {\n  return (n < 2) ? 1 : fib(n-2)+ fib(n-1);\n}\n\n//We're going to use n threads\nvar numThreads= +process.argv[3] || 1;\nconsole.log(\"Using \"+ numThreads+ \" threads\");\n\nvar threads= [];\nvar round_robin= 0;\nvar t= require('threads_a_gogo');\nwhile (numThreads--) {\n  threads.push(t.create().eval(fib));\n}\n\nvar i= 0;\nvar n= 35;\nfunction ƒ (req, res) {\n  if ((++i) % 10) {\n    res.end(\" QUICK\");\n    process.stdout.write(\" QUICK\");\n  }\n  else {\n    round_robin= (++round_robin) % threads.length;\n    threads[round_robin].eval('fib('+ n+ ')', function cb (err, data) {\n      if (err) throw err;\n      var txt= ' '+ data;\n      res.end(txt);\n      process.stdout.write(txt);\n    });\n  }\n}\n\n\nvar port= +process.argv[2] || 1234;\nvar http= require('http');\nhttp.globalAgent.maxSockets= 8192+2048;\nhttp.createServer(ƒ).listen(port);\nconsole.log('Fibonacci server (WITH THREADS) running @port: '+ port);\n\n","/home/travis/build/npmtest/node-npmtest-webworker-threads/node_modules/webworker-threads/benchmark/b02_fibonacci_server_threads_pool.js":"\n\nfunction fib (n) {\n  return (n < 2) ? 1 : fib(n-2)+ fib(n-1);\n}\n\n//We're going to use n threads\nvar numThreads= +process.argv[3] || 1;\nconsole.log(\"Using a POOL of \"+ numThreads+ \" threads\");\n\nvar pool= require('threads_a_gogo').createPool(numThreads).all.eval(fib);\n\nvar i= 0;\nvar n= 35;\nfunction ƒ (req, res) {\n  if ((++i) % 10) {\n    res.end(\" QUICK\");\n    process.stdout.write(\" QUICK\");\n  }\n  else {\n    pool.any.eval('fib('+ n+ ')', function cb (err, data) {\n      if (err) throw err;\n      var txt= ' '+ data;\n      res.end(txt);\n      process.stdout.write(txt);\n    });\n  }\n}\n\n\nvar port= +process.argv[2] || 1234;\nvar http= require('http');\nhttp.globalAgent.maxSockets= 8192+2048;\nhttp.createServer(ƒ).listen(port);\nconsole.log('Fibonacci server (WITH A THREAD POOL) running @port: '+ port);\n\n","/home/travis/build/npmtest/node-npmtest-webworker-threads/node_modules/webworker-threads/benchmark/b03_fibonacci_server_clustered.js":"\n\nfunction fib (n) {\n  return (n < 2) ? 1 : fib(n-2)+ fib(n-1);\n}\n\nvar i= 0;\nvar n= 35;\nfunction ƒ (req, res) {\n  if ((++i) % 10) {\n    res.end(\" QUICK\");\n    process.stdout.write(\" QUICK\");\n  }\n  else {\n    var txt= ' '+ fib(n);\n    res.end(txt);\n    process.stdout.write(txt);\n  }\n}\n\nvar cluster = require('cluster');\nif (cluster.isMaster) {\n  require('http').globalAgent.maxSockets= 8192+2048;\n  var numCPUs = process.argv[3] || 1;\n  for (var i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on('death', function(worker) {\n    console.log('worker ' + worker.pid + ' died');\n  });\n} else {\n  var port= + process.argv[2] || 1234;\n  var http= require('http');\n  http.globalAgent.maxSockets= 8192+2048;\n  http.createServer(ƒ).listen(port);\n  console.log('Fibonacci server (CLUSTERED) listening: ' + port);\n}\n\n","/home/travis/build/npmtest/node-npmtest-webworker-threads/node_modules/webworker-threads/benchmark/b04_only_quick.js":"\n\nfunction ƒ (req, res) {\n  res.end(\" QUICK\");\n  process.stdout.write(\" QUICK\");\n}\n\n\nvar port= +process.argv[2] || 1234;\nvar http= require('http');\nhttp.globalAgent.maxSockets= 8192+2048;\nhttp.createServer(ƒ).listen(port);\nconsole.log('Fibonacci server (NO THREADS) running @port: '+ port);\n\n","/home/travis/build/npmtest/node-npmtest-webworker-threads/node_modules/webworker-threads/benchmark/pi.js":"\n\nvar Threads= require('threads_a_gogo');\n\n\nfunction cb (err, msg) {\n  this.destroy();\n  ++i;\n  process.stdout.write('\\n'+ msg + ' -> '+ this.id);\n}\n\nfunction pi () {\n  var π= 0;\n  var num= 4;\n  var den= 1;\n  var plus= true;\n\n  while (den < 5e7) {\n    if (plus) {\n      π+= num/den;\n      plus= false;\n    }\n    else {\n      π-= num/den;\n      plus= true;\n    }\n    den+= 2;\n  }\n  return π;\n}\n\n\nvar i= +process.argv[2] || 1;\nconsole.log('Using '+ i+ ' threads');\n\n\nvar t= Date.now();\nwhile (i--) {\n  Threads.create().eval('('+ pi+ ')()', cb);\n}\n\n\ni= 0;\nprocess.on('exit', function () {\n  t= Date.now()- t;\n  var tps= (i*1e3/t).toFixed(1);\n  console.log('\\nTiempo total (ms) -> '+ t);\n  console.log('Threads por segundo -> '+ tps);\n  console.log('Total de threads ejecutadas -> '+ i);\n});\n","/home/travis/build/npmtest/node-npmtest-webworker-threads/node_modules/webworker-threads/benchmark/pi_precompiled.js":"\n\nvar Threads= require('threads_a_gogo');\n\n\nfunction cb (err, msg) {\n  this.destroy();\n  ++i;\n  process.stdout.write('\\n'+ msg + ' -> '+ this.id);\n}\n\nfunction pi () {\n  var π= 0;\n  var num= 4;\n  var den= 1;\n  var plus= true;\n\n  while (den < 1e7) {\n    if (plus) {\n      π+= num/den;\n      plus= false;\n    }\n    else {\n      π-= num/den;\n      plus= true;\n    }\n    den+= 2;\n  }\n  return π;\n}\n\n\nvar i= +process.argv[2] || 1;\nconsole.log('Using '+ i+ ' threads');\n\nvar precompiled= Threads.preCompile('('+ pi+ ')()');\nvar t= Date.now();\nwhile (i--) {\n  Threads.create().eval(precompiled, cb);\n}\n\n\ni= 0;\nprocess.on('exit', function () {\n  t= Date.now()- t;\n  var tps= (i*1e3/t).toFixed(1);\n  console.log('\\nTiempo total (ms) -> '+ t);\n  console.log('Threads por segundo -> '+ tps);\n  console.log('Total de threads ejecutadas -> '+ i);\n});\n","/home/travis/build/npmtest/node-npmtest-webworker-threads/node_modules/webworker-threads/src/createPool.js":"// Generated by LiveScript 1.5.0\nfunction createPool(n){\n  var T, pool, idleThreads, q, poolObject, e;\n  T = this;\n  n = Math.floor(n);\n  if (!(n > 0)) {\n    throw '.createPool( num ): number of threads must be a Number > 0';\n  }\n  pool = [];\n  idleThreads = [];\n  q = {\n    first: null,\n    last: null,\n    length: 0\n  };\n  poolObject = {\n    on: onEvent,\n    load: poolLoad,\n    destroy: destroy,\n    pendingJobs: getPendingJobs,\n    idleThreads: getIdleThreads,\n    totalThreads: getNumThreads,\n    any: {\n      eval: evalAny,\n      emit: emitAny\n    },\n    all: {\n      eval: evalAll,\n      emit: emitAll\n    }\n  };\n  try {\n    while (n--) {\n      pool[n] = idleThreads[n] = T.create();\n    }\n  } catch (e$) {\n    e = e$;\n    destroy('rudely');\n    throw e;\n  }\n  return poolObject;\n  function poolLoad(path, cb){\n    var i;\n    i = pool.length;\n    while (i--) {\n      pool[i].load(path, cb);\n    }\n  }\n  function nextJob(t){\n    var job;\n    job = qPull();\n    if (job) {\n      if (job.type === 1) {\n        t.eval(job.srcTextOrEventType, function(e, d){\n          var f;\n          nextJob(t);\n          f = job.cbOrData;\n          if (typeof f === 'function') {\n            try {\n              return f.call(t, e, d);\n            } catch (e$) {\n              e = e$;\n              return e;\n            }\n          } else {\n            return t.emit(job.srcTextOrEventType, f);\n          }\n        });\n      } else if (job.type === 2) {\n        t.emit(job.srcTextOrEventType, job.cbOrData);\n        nextJob(t);\n      }\n    } else {\n      idleThreads.push(t);\n    }\n  }\n  function qPush(srcTextOrEventType, cbOrData, type){\n    var job;\n    job = {\n      srcTextOrEventType: srcTextOrEventType,\n      cbOrData: cbOrData,\n      type: type,\n      next: null\n    };\n    if (q.last) {\n      q.last = q.last.next = job;\n    } else {\n      q.first = q.last = job;\n    }\n    q.length++;\n  }\n  function qPull(){\n    var job;\n    job = q.first;\n    if (job) {\n      if (q.last === job) {\n        q.first = q.last = null;\n      } else {\n        q.first = job.next;\n      }\n      q.length--;\n    }\n    return job;\n  }\n  function evalAny(src, cb){\n    qPush(src, cb, 1);\n    if (idleThreads.length) {\n      nextJob(idleThreads.pop());\n    }\n    return poolObject;\n  }\n  function evalAll(src, cb){\n    pool.forEach(function(v, i, o){\n      return v.eval(src, cb);\n    });\n    return poolObject;\n  }\n  function emitAny(event, data){\n    qPush(event, data, 2);\n    if (idleThreads.length) {\n      nextJob(idleThreads.pop());\n    }\n    return poolObject;\n  }\n  function emitAll(event, data){\n    pool.forEach(function(v, i, o){\n      return v.emit(event, data);\n    });\n    return poolObject;\n  }\n  function onEvent(event, cb){\n    pool.forEach(function(v, i, o){\n      return v.on(event, cb);\n    });\n    return this;\n  }\n  function destroy(rudely){\n    var err, beNice, beRude;\n    err = function(){\n      throw 'This thread pool has been destroyed';\n    };\n    beNice = function(){\n      if (q.length) {\n        return setTimeout(beNice, 666);\n      } else {\n        return beRude();\n      }\n    };\n    beRude = function(){\n      q.length = 0;\n      q.first = null;\n      pool.forEach(function(v, i, o){\n        return v.destroy();\n      });\n      return poolObject.eval = poolObject.totalThreads = poolObject.idleThreads = poolObject.pendingJobs = poolObject.destroy = err;\n    };\n    if (rudely) {\n      beRude();\n    } else {\n      beNice();\n    }\n  }\n  function getNumThreads(){\n    return pool.length;\n  }\n  function getIdleThreads(){\n    return idleThreads.length;\n  }\n  function getPendingJobs(){\n    return q.length;\n  }\n  return getPendingJobs;\n}","/home/travis/build/npmtest/node-npmtest-webworker-threads/node_modules/webworker-threads/src/events.js":"// Generated by LiveScript 1.5.0\nfunction DispatchEvents(thread){\n  thread = (this.on = function(e, f, q){\n    if (q = thread._on[e]) {\n      q.push(f);\n    } else {\n      thread._on[e] = [f];\n    }\n    return thread;\n  }, this.once = function(e, f, q){\n    !(q = thread._on[e]) && (q = thread._on[e] = []);\n    if (q.once) {\n      q.once.push(f);\n    } else {\n      q.once = [f];\n    }\n    return thread;\n  }, this.removeAllListeners = function(e){\n    if (e) {\n      delete thread._on[e];\n    } else {\n      thread._on = {};\n    }\n    return thread;\n  }, this.dispatchEvents = function(event, args, q, i, len){\n    var e, results$ = [];\n    if (q = thread._on[event]) {\n      try {\n        i = 0;\n        len = q.length;\n        while (i < len) {\n          q[i++].apply(thread, args);\n        }\n        if (q = q.once) {\n          q.once = undefined;\n          i = 0;\n          len = q.length;\n          while (i < len) {\n            results$.push(q[i++].apply(thread, args));\n          }\n          return results$;\n        }\n      } catch (e$) {\n        e = e$;\n        return __postError({\n          message: e,\n          filename: '',\n          lineno: 0\n        });\n      }\n    }\n  }, this._on = {}, this);\n  return this.dispatchEvents;\n}","/home/travis/build/npmtest/node-npmtest-webworker-threads/node_modules/webworker-threads/src/load.js":"// Generated by LiveScript 1.5.0\nvar onmessage, this$ = this;\nfunction addEventListener(event, cb){\n  return this.thread.on(event, cb);\n}\nfunction close(){\n  return this.thread.emit('close');\n}\nfunction importScripts(){\n  var i$, len$, p, results$ = [];\n  for (i$ = 0, len$ = (arguments).length; i$ < len$; ++i$) {\n    p = (arguments)[i$];\n    results$.push(self.eval(native_fs_.readFileSync(p, 'utf8')));\n  }\n  return results$;\n}\nonmessage = null;\nthread.on('message', function(args){\n  return typeof onmessage == 'function' ? onmessage(args) : void 8;\n});\n","/home/travis/build/npmtest/node-npmtest-webworker-threads/node_modules/webworker-threads/src/thread_nextTick.js":"// Generated by LiveScript 1.5.0\nfunction ThreadNextTick(){\n  function nextTick(cb){\n    thread._ntq.push(cb);\n    return this;\n  }\n  function dispatchNextTicks(l, p, err, _ntq){\n    var e;\n    if (l = (_ntq = thread._ntq).length) {\n      p = err = 0;\n      try {\n        for (;;) {\n          _ntq[p]();\n          if (!(++p < l)) {\n            break;\n          }\n        }\n      } catch (e$) {\n        e = e$;\n        thread._ntq = _ntq.slice(++p);\n        throw e;\n      }\n      return (thread._ntq = _ntq.slice(p)).length;\n    }\n    return 0;\n  }\n  thread._ntq = [];\n  thread.nextTick = nextTick;\n  return dispatchNextTicks;\n}\n","/home/travis/build/npmtest/node-npmtest-webworker-threads/node_modules/webworker-threads/src/worker.js":"// Generated by LiveScript 1.5.0\nfunction Worker(){\n  var Threads;\n  Threads = this;\n  return (function(){\n    var prototype = constructor.prototype;\n    function constructor(code){\n      var t, this$ = this;\n      this.thread = t = Threads.create();\n      t.on('message', function(args){\n        return typeof this$.onmessage == 'function' ? this$.onmessage({\n          data: args\n        }) : void 8;\n      });\n      t.on('error', function(args){\n        return typeof this$.onerror == 'function' ? this$.onerror(args) : void 8;\n      });\n      t.on('close', function(){\n        return t.destroy();\n      });\n      this.terminate = function(){\n        return t.destroy();\n      };\n      this.addEventListener = function(event, cb){\n        if (event === 'message') {\n          return this$.onmessage = cb;\n        } else {\n          return t.on(event, cb);\n        }\n      };\n      this.dispatchEvent = function(event){\n        return t.emitSerialized(event.type, event);\n      };\n      this.postMessage = function(data){\n        return t.emitSerialized('message', {\n          data: data\n        });\n      };\n      if (typeof code === 'function') {\n        t.eval(\"(\" + code + \")()\");\n      } else if (code != null) {\n        t.load(code);\n      }\n    }\n    return constructor;\n  }());\n}\n"}